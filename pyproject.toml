[tool.poetry]
name = "nvautoinstall"
version = "0.4.2"
description = "A CLI tool which lets you install proprietary NVIDIA drivers and much more easily on Fedora Linux (32 or above, ELN or Rawhide)"
authors = ["Akashdeep Dhar <akashdeep.dhar@gmail.com>", "Christopher Engelhard <lcts@fedoraproject.org>", "Onuralp SEZER <thunderbirdtr@fedoraproject.org>", "Gustavo Costa <xfgusta@gmail.com>"]
license = "GPL-3.0-or-later"
maintainers = ["Akashdeep Dhar <akashdeep.dhar@gmail.com>"]
readme = "README.md"
homepage = "https://copr.fedorainfracloud.org/coprs/t0xic0der/nvidia-auto-installer-for-fedora"
repository = "https://github.com/t0xic0der/nvidia-auto-installer-for-fedora-linux"
documentation = "https://github.com/t0xic0der/nvidia-auto-installer-for-fedora-linux/blob/master/README.md"
keywords = ["fedora", "cuda", "nvidia", "optimus"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Natural Language :: English",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: POSIX :: Linux",
    "Topic :: System :: Hardware :: Hardware Drivers",
    "Topic :: System :: Operating System",
    "Topic :: Utilities",
]

[tool.poetry.dependencies]
python = "^3.8"
click = ">=7.1.2"
distro = ">=1.5.0"
iniconfig = ">=1.1.1" # minimun version supported

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.0.0 || ^4.0.0"
isort = "^5.10.1"
flake8 = "<8"
pytest = "^6.2.5 || ^8.0.0"
pytest-black = "^0.3.12 || ^0.6.0"
pytest-flake8 = "^1.0.7"
pytest-isort = "^3.0.0 || ^4.0.0"
bandit = "^1.7.4"
black = "^23.0.0 || ^24.0.0"
pytest-cov = "^4.0.0 || ^5.0.0 || ^6.0.0"

[tool.pytest.ini_options]
addopts = "--cov=nvautoinstall --cov-report=term-missing"

[tool.isort]
line_length = 100
profile = "black"

[tool.black]
line-length = 100
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
ignore-init-module-imports = true
# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "PD", "PGH", "PIE", "PL", "PT", "PTH", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []

select = [
    # flake8-builtins
    "A",
    # flake8-blind-except
    "BLE",
    # flake8-comprehensions
    "C4",
    # mccabe complexity
    "C90",
    # pydocstyle
    # "D",
    # pycodestyle
    "E", "W",
    # eradicate (remove commented out code)
    "ERA",
    # pyflakes
    "F",
    # flake8-logging-format
    "G",
    # isort
    "I",
    # flake8-import-conventions
    "ICN",
    # flake8-implicit-str-concat
    "ISC",
    # pylint
    "PLC", "PLE", "PLR", "PLW",
    # misc lints
    "PIE",
    # flake8-pyi
    "PYI",
    # flake8-pytest-style
    "PT",
    # pygrep-hooks
    "PGH",
    # flake8-quotes
    "Q",
    # flake8-bandit
    "S",
    # flake8-debugger
    "T10",
    # flake8-print
    "T20",
    # flake8-type-checking
    "TCH",
    # tidy imports
    "TID",
    # pyupgrade
    "UP",
    # Ruff-specific rules
    "RUF",
]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "examples",
]

# Ignores start with S means subprocess usage error catch
#
extend-ignore = ["S607","S605","S602","C901","PLR0912","PLR0915","PLR5501","PLR2004","BLE001","ISC003"]

# Same as Black.
line-length = 100

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"
docstring-quotes = "double"

#[tool.ruff.pydocstyle]
#convention = "google"

[tool.ruff.per-file-ignores]
"__init__.py" = ["E402","F401"]

[tool.ruff.pylint]
max-args = 20

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
nvautoinstall = "nvautoinstall.main:main"
